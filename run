#!/bin/bash

# Initializes the repository on the local machine: sets up
# the .git folder and downloads the correct JDK.
init() {
	# Disable auto-modification of CR/LF endings
	echo "Disabling git config core.autocrlf (this repo)..."
	git config core.autocrlf false
	echo "Done"

  echo "Cleaning old $jdk folder..."
  rm -rf $jdk >/dev/null 2>&1
  rm -f lib/sha_comp_0.txt >/dev/null 2>&1
  rm -f lib/sha_comp_1.txt >/dev/null 2>&1
  echo "Done"

	# Download the package
	echo "Downloading Amazon Corretto JDK and checksum..."
	curl -L -o ./lib/$targetJdk $sourceJdk

	# Download the checksum
	curl -L -o ./lib/$targetSha $sourceSha
	echo "Done"

	# Check SHA256
	echo "Verifying JDK checksum..."
	cd lib
	echo "  $targetJdk" >> $targetSha
  if [[ "$os" == "macos" ]]; then
    # MacOS
    shasum -a 256 -c $targetSha || {
      echo "Bad SHA, do ./run init again"
      exit 1
    }
  else
    # Linux
    sha256sum -c $targetSha || {
      echo "Bad SHA, do ./run init again"
      exit 1
    }
  fi
  cd ..
	echo "Done"

	# Unpack
	echo "Unpacking JDK..."
	mkdir -p ./lib/tmp
	tar -xf ./lib/$targetJdk -C ./lib/tmp

	# Remove residue
	rm -f ./lib/$targetJdk
	rm -f ./lib/$targetSha

	# Move files directly into current $jdk
	mkdir -p $jdk
	mv ./lib/tmp/amazon-*/* $jdk
  rm -rf ./lib/tmp
	echo "Init complete"
}

# Compiles the .build project.
compileBuild() {
  $bin/javac -cp .build/src -d .build/out \
    .build/src/rs/edu/raf/si/bank2/Main.java
}

# Runs any commands other than init through the Java build script with JDK.
run() {
  export JAVA_HOME=$projectHome/$jdk
  $bin/java -cp .build/out rs.edu.raf.si.bank2.Main "$@"
}

# Main script logic
main() {
  ver=17
  os=$(uname)
  ext="tar.gz"
  # Get architecture; if egrep returns nothing, then it's arm64
  if [[ -z "$(uname -m | egrep "^(arm.*)|(aarch.*)")" ]]; then
    arch="x64"
  else
    arch="aarch64"
  fi
  # Get os and sha commands for each os
  if [[ "$os" == "Linux" ]]; then
    os="linux"
  elif [[ "$os" == "Darwin" ]]; then
    os="macos"
  else
    # Windows not supported, use run.cmd instead!
    # os="windows"
    # ext="zip"
    os="linux"
  fi

  # File/dir names
  projectHome=$(pwd)
  targetJdk=amazon-corretto-$ver-$arch-$os-jdk.$ext
  sourceJdk=https://corretto.aws/downloads/latest/$targetJdk
  targetSha=amazon-corretto-$ver-$arch-$os-jdk.$ext.checksum
  sourceSha=https://corretto.aws/downloads/latest_sha256/$targetJdk
  jdk=lib/jdk
  bin="$jdk/bin"
  if which bash >/dev/null 2>&1; then
    terminal="bash"
  elif which sh >/dev/null 2>&1; then
    terminal="sh"
  else
    echo "Unknown shell"
    exit 1
  fi

  if [[ "$1" == "init" ]]; then
    init
  elif [[ "$1" == "compileBuild" ]]; then
    compileBuild
  else
    if [ -d "$bin" ]; then
      run "$@" --shellCommand $terminal \
        --shellStartTokenCount 1 \
        --shellStartTokens -c \
        --platform nix
    else
      if java --version >/dev/null; then
        java -cp .build/out rs.edu.raf.si.bank2.Main \
          "$@" --shellCommand $terminal \
          --shellStartTokenCount 1 \
          --shellStartTokens -c \
          --platform nix
      else
        echo "Java not installed! Run init or install Java first"
      fi
    fi
  fi
}

main "$@"